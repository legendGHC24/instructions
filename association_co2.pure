###Pure
Class model::country
{
    country: String[1];
    year: Integer[1];
    iso_code: String[1];
    population: Integer[1];
}

Class model::co2Emissions
{
    {doc.doc = 'Annual total emissions of carbon dioxide (CO₂), excluding land-use change, measured in million tonnes.'} co2: Float[1];
    {doc.doc = 'Annual growth in total emissions of carbon dioxide (CO₂), excluding land-use change, measured in million tonnes.'} co2_growth_abs: Float[1];
    {doc.doc = 'Annual percentage growth in total emissions of carbon dioxide (CO₂), excluding land-use change.'} co2_growth_prct: Float[1];
}

Association model::country_co2Emissions
{
  country: model::country[1];
  co2Emissions: model::co2Emissions[1];
}



###Relational
Database local::DuckDuckDatabaseAssociation
(
 
  Table co2(
    country VARCHAR(0),
    year BIGINT,
    iso_code VARCHAR(0),
    population BIGINT,
    co2 FLOAT,
    co2_growth_abs FLOAT,
    co2_growth_prct FLOAT
  )
  Join co2_SelfJOin(co2.country={target}.country and co2.year={target}.year)
)



###Mapping
Mapping model::associationMapping
(
  *model::country[cty]: Relational
  {
    ~primaryKey
    (
      [local::DuckDuckDatabaseAssociation]co2.country,
      [local::DuckDuckDatabaseAssociation]co2.year
    )
    country: [local::DuckDuckDatabaseAssociation]co2.country,
    year: [local::DuckDuckDatabaseAssociation]co2.year,
    iso_code: [local::DuckDuckDatabaseAssociation]co2.iso_code,
    population: [local::DuckDuckDatabaseAssociation]co2.population
  }

  *model::co2Emissions[ce]: Relational
  {
    ~primaryKey
      (
        [local::DuckDuckDatabaseAssociation]co2.country,
        [local::DuckDuckDatabaseAssociation]co2.year
      )
    co2: [local::DuckDuckDatabaseAssociation]co2.co2,
    co2_growth_abs: [local::DuckDuckDatabaseAssociation]co2.co2_growth_abs,
    co2_growth_prct: [local::DuckDuckDatabaseAssociation]co2.co2_growth_prct
  }
  model::country_co2Emissions : Relational
   {
      AssociationMapping
      (
         country[ce,cty] : [local::DuckDuckDatabaseAssociation]@co2_SelfJOin, 
         co2Emissions[cty,ce] : [local::DuckDuckDatabaseAssociation]@co2_SelfJOin
      )
   }

)



###Connection
RelationalDatabaseConnection local::DuckDuckConnectionAssociation
{
  type: DuckDB;
  specification: DuckDB
  {
    path: 'co2-duckdb';
  };
  auth: Test;
}



###Runtime
Runtime local::DuckDuckRuntimeAssociation
{
  mappings:
  [
    model::associationMapping
  ];
  connections:
  [
    local::DuckDuckDatabaseAssociation:
    [
      connection: local::DuckDuckConnectionAssociation
    ]
  ];
}



###Pure
function model::GetOwidco2SimpleQuery(): meta::pure::tds::TabularDataSet[1]
{
  model::country.all()->project(
    [
      x | $x.country, 
      x | $x.population, 
      x | $x.year
    ],
    ['country', 'population', 'year']
  )
  ->from(
    model::associationMapping,
    local::DuckDuckRuntimeAssociation
  )
}



###Pure
function model::GetOwidco2uck(): meta::pure::tds::TabularDataSet[1]
{
  model::co2Emissions.all()->project(
    [
      x | $x.co2
    ],
    ['co2']
  )
  ->from(
    model::associationMapping,
    local::DuckDuckRuntimeAssociation
  )
}



// Query with association
###Pure
function model::GetCo2ForCountryAFG2016(): meta::pure::tds::TabularDataSet[1]
{
  model::co2Emissions.all()
  ->filter(x | ($x.country.iso_code == 'AFG') && ($x.country.year == '2016'))
  ->project([x | $x.co2], ['co2'])
  ->from(
      model::associationMapping,
      local::DuckDuckRuntimeAssociation
    )
}